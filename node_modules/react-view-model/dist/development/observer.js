/*react-view-model@2.0.0-pre.9#observer*/
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
exports.default = Observer;
var _canReflect = require('can-reflect');
var _canReflect2 = _interopRequireDefault(_canReflect);
var _canObservationRecorder = require('can-observation-recorder');
var _canObservationRecorder2 = _interopRequireDefault(_canObservationRecorder);
var _recorderDependencyHelpers = require('can-observation/recorder-dependency-helpers');
var _recorderDependencyHelpers2 = _interopRequireDefault(_recorderDependencyHelpers);
var _canQueues = require('can-queues');
var _canQueues2 = _interopRequireDefault(_canQueues);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
var ORDER = undefined;
function Observer(onUpdate) {
    this.newDependencies = _canObservationRecorder2.default.makeDependenciesRecorder();
    this.oldDependencies = null;
    this.onUpdate = onUpdate;
    var self = this;
    this.onDependencyChange = function (newVal, oldVal) {
        self.dependencyChange(this, newVal, oldVal);
    };
}
var weLeftSomethingOnTheStack = false;
Observer.prototype.startRecording = function () {
    if (weLeftSomethingOnTheStack) {
        var deps = _canObservationRecorder2.default.stop();
        if (!deps.reactViewModel) {
            throw new Error('If you see this error with another error, clearing that should solve this. If you see ' + 'this error alone, please open and issue on our github and tag Christopher and Justin.');
        }
    }
    this.oldDependencies = this.newDependencies;
    this.nextDependencies = _canObservationRecorder2.default.start();
    this.nextDependencies.reactViewModel = true;
    weLeftSomethingOnTheStack = true;
    if (this.order !== undefined) {
        ORDER = this.order;
    } else {
        if (ORDER !== undefined) {
            this.order = ++ORDER;
        } else {
            this.order = ORDER = 0;
        }
    }
};
Observer.prototype.stopRecording = function () {
    if (weLeftSomethingOnTheStack) {
        var deps = _canObservationRecorder2.default.stop();
        weLeftSomethingOnTheStack = false;
        if (!deps.reactViewModel) {
            throw new Error('One of these things is not like the others');
        }
    }
    this.newDependencies = this.nextDependencies;
    _recorderDependencyHelpers2.default.updateObservations(this);
};
Observer.prototype.dependencyChange = function () {
    _canQueues2.default.deriveQueue.enqueue(this.onUpdate, this, [], { priority: this.order });
};
Observer.prototype.teardown = function () {
    _recorderDependencyHelpers2.default.stopObserving(this.newDependencies, this.onDependencyChange);
    _canQueues2.default.deriveQueue.dequeue(this.onUpdate);
};
Observer.prototype.ignore = function (fn) {
    _canObservationRecorder2.default.ignore(fn)();
};
_canReflect2.default.assignSymbols(Observer.prototype, {
    'can.getName': function canGetName() {
        return _canReflect2.default.getName(this.constructor) + '<' + _canReflect2.default.getName(this.onUpdate) + '>';
    }
});