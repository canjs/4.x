/*react-view-model@2.0.0-pre.9#connect*/
'use strict';
Object.defineProperty(exports, '__esModule', { value: true });
var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ('value' in descriptor)
                descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function (Constructor, protoProps, staticProps) {
        if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
            defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _get = function get(object, property, receiver) {
    if (object === null)
        object = Function.prototype;
    var desc = Object.getOwnPropertyDescriptor(object, property);
    if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);
        if (parent === null) {
            return undefined;
        } else {
            return get(parent, property, receiver);
        }
    } else if ('value' in desc) {
        return desc.value;
    } else {
        var getter = desc.get;
        if (getter === undefined) {
            return undefined;
        }
        return getter.call(receiver);
    }
};
exports.default = connect;
var _react = require('react');
var _react2 = _interopRequireDefault(_react);
var _propTypes = require('prop-types');
var _propTypes2 = _interopRequireDefault(_propTypes);
var _canReflect = require('can-reflect');
var _canReflect2 = _interopRequireDefault(_canReflect);
var _observableComponent = require('./observable-component.js');
var _observableComponent2 = _interopRequireDefault(_observableComponent);
var _canObserve = require('./transforms/can-observe.js');
var _canObserve2 = _interopRequireDefault(_canObserve);
var _canDefine = require('./transforms/can-define.js');
var _canDefine2 = _interopRequireDefault(_canDefine);
var _function = require('./transforms/function.js');
var _function2 = _interopRequireDefault(_function);
var _object = require('./transforms/object.js');
var _object2 = _interopRequireDefault(_object);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError('Cannot call a class as a function');
    }
}
function _possibleConstructorReturn(self, call) {
    if (!self) {
        throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
    }
    return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
}
function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
        throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}
var TRANSFORMS = [
    _canObserve2.default,
    _canDefine2.default,
    _function2.default,
    _object2.default
];
function connect(config) {
    var type = TRANSFORMS.find(function (_ref) {
        var test = _ref.test;
        return test(config);
    });
    if (!type) {
        console.error('RVM: unrecognized config', config);
        throw new Error('RVM: unrecognized config');
    }
    var createViewModel = type.createViewModel, updateViewModel = type.updateViewModel, extractProps = type.extractProps, getPropTypes = type.getPropTypes;
    return function (BaseComponent) {
        var ConnectedComponent = getConnectedComponent(BaseComponent);
        if (BaseComponent.propTypes) {
            ConnectedComponent.propTypes = { _vm: _propTypes2.default.shape(BaseComponent.propTypes) };
        }
        ConnectedComponent.displayName = (BaseComponent.displayName || BaseComponent.name) + '~RVMConnected';
        try {
            Object.defineProperty(ConnectedComponent, 'name', {
                writable: false,
                enumerable: false,
                configurable: true,
                value: ConnectedComponent.displayName
            });
        } catch (e) {
        }
        if (ConnectedComponent.prototype) {
            _canReflect2.default.assignSymbols(ConnectedComponent.prototype, {
                'can.getName': function canGetName() {
                    return _canReflect2.default.getName(this.constructor) + '{}';
                }
            });
        }
        var UpgradedComponent = function (_ObservableComponent) {
            _inherits(UpgradedComponent, _ObservableComponent);
            function UpgradedComponent() {
                _classCallCheck(this, UpgradedComponent);
                return _possibleConstructorReturn(this, (UpgradedComponent.__proto__ || Object.getPrototypeOf(UpgradedComponent)).apply(this, arguments));
            }
            _createClass(UpgradedComponent, [
                {
                    key: 'componentWillReceiveProps',
                    value: function componentWillReceiveProps(nextProps) {
                        this._observer.ignore(function () {
                            updateViewModel(this.viewModel, nextProps);
                        }.bind(this));
                    }
                },
                {
                    key: 'shouldComponentUpdate',
                    value: function shouldComponentUpdate() {
                        return !!this.viewModel;
                    }
                },
                {
                    key: 'componentWillMount',
                    value: function componentWillMount() {
                        Object.defineProperty(this, 'viewModel', {
                            writable: false,
                            enumerable: false,
                            configurable: true,
                            value: createViewModel(config, this.props)
                        });
                        _get(UpgradedComponent.prototype.__proto__ || Object.getPrototypeOf(UpgradedComponent.prototype), 'componentWillMount', this).call(this);
                    }
                },
                {
                    key: 'componentWillUnmount',
                    value: function componentWillUnmount() {
                        delete this.viewModel;
                        _get(UpgradedComponent.prototype.__proto__ || Object.getPrototypeOf(UpgradedComponent.prototype), 'componentWillUnmount', this).call(this);
                    }
                },
                {
                    key: 'render',
                    value: function render() {
                        var _vm = extractProps ? extractProps(config, this.viewModel) : this.viewModel;
                        return _react2.default.createElement(ConnectedComponent, { _vm: _vm });
                    }
                }
            ]);
            return UpgradedComponent;
        }(_observableComponent2.default);
        UpgradedComponent.displayName = (BaseComponent.displayName || BaseComponent.name || 'Component') + '~RVM';
        try {
            Object.defineProperty(UpgradedComponent, 'name', {
                writable: false,
                enumerable: false,
                configurable: true,
                value: UpgradedComponent.displayName
            });
        } catch (e) {
        }
        if (getPropTypes) {
            var propTypes = getPropTypes(config);
            if (propTypes) {
                UpgradedComponent.propTypes = propTypes;
            }
        }
        _canReflect2.default.assignSymbols(UpgradedComponent.prototype, {
            'can.getName': function canGetName() {
                return _canReflect2.default.getName(this.constructor) + '{}';
            }
        });
        return UpgradedComponent;
    };
}
function getConnectedComponent(BaseComponent) {
    if (BaseComponent.prototype instanceof _react.Component) {
        var _ConnectedComponent = function (_BaseComponent) {
            _inherits(_ConnectedComponent, _BaseComponent);
            function _ConnectedComponent(props) {
                _classCallCheck(this, _ConnectedComponent);
                var proxy = typeof Proxy === 'undefined' ? Object.assign({}, props._vm, {
                    _raw: props,
                    _vm: props._vm
                }) : new Proxy(props._vm, {
                    get: function get(target, prop) {
                        if (prop === '_raw') {
                            return props;
                        }
                        if (prop === '_vm') {
                            return target;
                        }
                        return target[prop];
                    }
                });
                var _this2 = _possibleConstructorReturn(this, (_ConnectedComponent.__proto__ || Object.getPrototypeOf(_ConnectedComponent)).call(this, proxy));
                _this2._raw_props = true;
                return _this2;
            }
            _createClass(_ConnectedComponent, [
                {
                    key: 'componentWillMount',
                    value: function componentWillMount() {
                        this._raw_props = false;
                        if (typeof _get(_ConnectedComponent.prototype.__proto__ || Object.getPrototypeOf(_ConnectedComponent.prototype), 'componentWillMount', this) === 'function') {
                            _get(_ConnectedComponent.prototype.__proto__ || Object.getPrototypeOf(_ConnectedComponent.prototype), 'componentWillMount', this).call(this);
                        }
                    }
                },
                {
                    key: 'props',
                    set: function set(props) {
                        if (this._props && props === this._props._vm) {
                            return;
                        }
                        this._props = props;
                    },
                    get: function get() {
                        if (this._raw_props) {
                            return this._props._raw;
                        }
                        return this._props._vm;
                    }
                }
            ]);
            return _ConnectedComponent;
        }(BaseComponent);
        return _ConnectedComponent;
    }
    var ConnectedComponent = function ConnectedComponent(_ref2) {
        var _vm = _ref2._vm;
        return BaseComponent(_vm);
    };
    return ConnectedComponent;
}